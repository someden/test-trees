{"version":3,"sources":["db.ts","Tree.tsx","CachedTree.tsx","CachedTreeColumn.tsx","utils.ts","DBTree.tsx","App.tsx","useLeafs.ts","index.tsx"],"names":["generateLeafs","id","iter","levels","parentId","arr","Array","from","length","map","value","deleted","concat","db","Map","updateView","updateDeleted","forEach","leaf","hasDeletedParent","parent","get","dbTreeApi","connect","updater","values","reset","randomTroubles","message","Math","random","Error","cachedTreeApi","getLeafById","updateLeafs","leafs","newIds","updatedLeafs","newLeaf","has","newId","size","set","Leaf","children","actions","actionsNode","useMemo","className","Tree","tree","CachedTreeActions","onAdd","onEdit","onDelete","onAddCallback","useCallback","onEditCallback","onDeleteCallback","type","onClick","CachedTree","CachedTreeColumn","onApply","onReset","newLeafParent","setNewLeafParent","useState","leafToEdit","setLeafToEdit","inputEl","useRef","setValue","resetForm","initAdd","parentLeaf","setTimeout","current","focus","initEdit","onChange","e","target","onSubmit","preventDefault","Date","now","onApplyCallback","onResetCallback","ref","disabled","getTree","leafsObj","reduce","acc","push","DBTreeActions","onLoadToCache","onLoadToCacheCallback","DBTree","setLeafs","useEffect","dbTree","App","addLeaf","updateLeaf","deleteLeaf","state","some","updatedLeaf","useLeafs","applyLeafs","error","alert","resetLeafs","cachedTree","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IAAA,SAASA,IACP,IAAIC,EAAK,EAET,MAAMC,EAAO,CAACC,EAAS,EAAGC,EAAY,GAAEH,OACtC,MAAMI,EAAMC,MAAMC,KAAK,CAAEC,OAAQL,IAAUM,KAAI,IAC7C,CAAE,MAAIR,EAAM,CAAEA,GAAK,GAAEA,IAAMG,WAAUM,MAAQ,OAAMT,IAAMU,SAAS,MAEpE,OAAOR,EAAS,EAAIE,EAAIO,UAAUP,EAAII,KAAI,EAAER,KAAQC,EAAKC,EAAS,EAAI,GAAEF,QAAUI,GAGpF,MAAO,CAAC,CAAE,GAAEJ,IAAM,CAAEA,GAAK,GAAEA,IAAMG,SAAU,KAAMM,MAAQ,OAAMT,IAAMU,SAAS,OAAaT,KAG7F,IAAIW,EAAyB,IAAIC,IAAId,KACjCe,EAAa,OAWjB,SAASC,IACPH,EAAGI,SAAQC,KACJA,EAAKP,SAAWQ,EAAiBD,EAAKd,YACzCc,EAAKP,SAAU,MAKrB,SAASQ,EAAiBf,GACxB,MAAMgB,EAASP,EAAGQ,IAAIjB,GAAY,IAElC,QAAKgB,IAIEA,EAAOT,SAAWQ,EAAiBC,EAAOhB,WAQnD,MAAMkB,EAAY,CAChBC,QANF,SAAiBC,GACfT,EAAa,IAAMS,EAAQlB,MAAMC,KAAKM,EAAGY,WACzCV,KAKAW,MAlCF,WACEb,EAAK,IAAIC,IAAId,KACbe,MAmCF,SAASY,EAAeC,GACtB,GAAIC,KAAKC,SAAW,GAClB,MAAM,IAAIC,MAAMH,GAsCpB,MAAMI,EAAgB,CACpBC,YAnCF,SAAqBhC,GAEnB,OADA0B,EAAe,6BACR,IAAKd,EAAGQ,IAAIpB,KAkCnBiC,YA/BF,SAAqBC,GACnBR,EAAe,6BAEf,MAAMS,EAAoC,GAEpCC,EAAeF,EAAM1B,KAAIS,IAC7B,MAAMoB,EAAU,IAAKpB,GAErB,IAAKL,EAAG0B,IAAID,EAAQrC,IAAK,CACvB,MAAMuC,EAnDF,GAAE3B,EAAG4B,KAAO,IAoDhBL,EAAOE,EAAQrC,IAAMuC,EACrBF,EAAQrC,GAAKuC,EASf,OANIF,EAAQlC,UAAYgC,EAAOE,EAAQlC,YACrCkC,EAAQlC,SAAWgC,EAAOE,EAAQlC,WAGpCS,EAAG6B,IAAIJ,EAAQrC,GAAIqC,GAEZA,KAMT,OAHAtB,IACAD,IAEOsB,I,WC7ET,SAASM,GAAK,GAAE1C,EAAF,SAAMG,EAAN,MAAgBM,EAAhB,QAAuBC,EAAvB,SAAgCiC,EAAhC,QAA0CC,IACtD,MAAMC,EAAcC,mBAClB,IAAMF,EAAQ,CAAE5C,KAAIG,WAAUM,QAAOC,aACrC,CAACV,EAAIG,EAAUM,EAAOC,EAASkC,IAGjC,OACE,qBAAIG,UAAU,kBAAd,UACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,8BAAf,SACGrC,EAAU,qBAAKqC,UAAU,aAAf,SAA6BtC,IAAeA,IAEvDC,EAME,KALF,qBAAKqC,UAAU,6BAAf,SACE,qBAAKA,UAAU,yBAAf,SACGF,SAKRF,EAASpC,OACR,cAACyC,EAAD,CACEC,KAAMN,EACNC,QAASA,IAET,QAKK,SAASI,GAAK,KAAEC,EAAF,QAAQL,IACnC,OACE,oBAAIG,UAAU,kDAAd,SACGE,EAAKzC,KAAKS,GACT,cAACyB,EAAD,IAEMzB,EACJ2B,QAASA,GAFJ3B,EAAKjB,QC/BpB,SAASkD,GAAkB,KAAEjC,EAAF,MAAQkC,EAAR,OAAeC,EAAf,SAAuBC,IAChD,MAAMC,EAAgBC,uBAAY,KAChCJ,EAAMlC,KACL,CAACA,EAAMkC,IACJK,EAAiBD,uBAAY,KACjCH,EAAOnC,KACN,CAACA,EAAMmC,IACJK,EAAmBF,uBAAY,KACnCF,EAASpC,EAAKjB,MACb,CAACiB,EAAMoC,IAEV,OACE,qCACE,wBAAQK,KAAK,SAASX,UAAU,gBAAgBY,QAASL,EAAzD,iBAGA,wBAAQI,KAAK,SAASX,UAAU,gBAAgBY,QAASH,EAAzD,kBAGA,wBAAQE,KAAK,SAASX,UAAU,gBAAgBY,QAASF,EAAzD,uBAOS,SAASG,GAAW,KAAEX,EAAF,MAAQE,EAAR,OAAeC,EAAf,SAAuBC,IACxD,MAAMT,EAAUW,uBAAatC,GAEzB,cAACiC,EAAD,CACEjC,KAAMA,EACNkC,MAAOA,EACPC,OAAQA,EACRC,SAAUA,KAGb,CAACF,EAAOC,EAAQC,IAEnB,OACE,cAACL,EAAD,CACEC,KAAMA,EACNL,QAASA,IC7CA,SAASiB,GAAiB,KAAEZ,EAAF,MAAQE,EAAR,OAAeC,EAAf,SAAuBC,EAAvB,QAAiCS,EAAjC,QAA0CC,IACjF,MAAOC,EAAeC,GAAoBC,mBAAuB,OAC1DC,EAAYC,GAAiBF,mBAAuB,MACrDG,EAAUC,iBAAyB,OAClC7D,EAAO8D,GAAYL,mBAAS,IAC7BM,EAAYjB,uBAAY,KAC5BU,EAAiB,MACjBG,EAAc,MACdG,EAAS,MACR,CAACN,EAAkBG,EAAeG,IAC/BE,EAAUlB,uBAAamB,IAC3BF,IACAP,EAAiBS,GACjBC,YAAW,KAAO,IAAD,EAAE,UAAAN,EAAQO,eAAR,SAAiBC,UAAW,KAC9C,CAACL,EAAWP,IACTa,EAAWvB,uBAAatC,IAC5BuD,IACAJ,EAAcnD,GACdsD,EAAStD,EAAKR,OACdkE,YAAW,KAAO,IAAD,EAAE,UAAAN,EAAQO,eAAR,SAAiBC,UAAW,KAC9C,CAACL,EAAWJ,EAAeG,IACxBd,EAAmBF,uBAAavD,IACpCqD,EAASrD,GACTwE,MACC,CAACA,EAAWnB,IACT0B,EAAWxB,uBAAayB,IAC5BT,EAASS,EAAEC,OAAOxE,SACjB,IACGyE,EAAW3B,uBAAayB,IAC5BA,EAAEG,iBACEnB,GACFb,EAAM,CAAEnD,GAAK,OAAM4B,KAAKC,WAAWuD,KAAKC,QAASlF,SAAU6D,EAAchE,GAAIS,QAAOC,SAAS,IAE3FyD,GACFf,EAAO,IAAKe,EAAY1D,UAE1B+D,MACC,CAACR,EAAeG,EAAY1D,EAAO+D,EAAWrB,EAAOC,IAClDkC,EAAkB/B,uBAAY,KAClCiB,IACAV,MACC,CAACU,EAAWV,IACTyB,EAAkBhC,uBAAY,KAClCiB,IACAT,MACC,CAACS,EAAWT,IAEf,OACE,sBAAKhB,UAAU,gCAAf,UACE,cAACa,EAAD,CACEX,KAAMA,EACNE,MAAOsB,EACPrB,OAAQ0B,EACRzB,SAAUI,IAEZ,qBAAKV,UAAU,YAAf,SACE,sBAAKA,UAAU,0BAAf,UACE,uBACEmC,SAAUA,EACVnC,UAAU,oDAFZ,UAIE,uBACEyC,IAAKnB,EACLX,KAAK,OACLX,UAAU,eACVtC,MAAOA,EACPsE,SAAUA,EACVU,UAAWzB,IAAkBG,IAE9BH,EACG,uBAAMjB,UAAU,mBAAhB,qBAA4CiB,EAAcvD,SAC1D,KAEJ,wBACEiD,KAAK,SACLX,UAAU,0BACV0C,UAAWzB,IAAkBG,EAH/B,mBAQF,qBAAKpB,UAAU,8BAAf,SACE,wBAAQW,KAAK,SAASX,UAAU,0BAA0BY,QAAS2B,EAAnE,qBAIF,qBAAKvC,UAAU,yBAAf,SACE,wBAAQW,KAAK,SAASX,UAAU,yBAAyBY,QAAS4B,EAAlE,6BCpGL,SAASG,EAAQxD,GACtB,MAAMe,EAAgB,GAChB0C,EAAqCzD,EAAM0D,QAC/C,CAACC,EAAK5E,KAAN,IAAqB4E,EAAK,CAAC5E,EAAKjB,IAAK,IAAKiB,EAAM0B,SAAU,OAC1D,IAWF,OARAT,EAAMlB,SAAQC,IACRA,EAAKd,UAAYwF,EAAS1E,EAAKd,UACjCwF,EAAS1E,EAAKd,UAAUwC,SAASmD,KAAKH,EAAS1E,EAAKjB,KAEpDiD,EAAK6C,KAAKH,EAAS1E,EAAKjB,QAIrBiD,EAGF,SAASlC,EAAcmB,GAC5B,MAAMyD,EAAqCzD,EAAM0D,QAC/C,CAACC,EAAK5E,KAAN,IAAqB4E,EAAK,CAAC5E,EAAKjB,IAAKiB,KACrC,IAGF,OAAOiB,EAAM1B,KAAIS,IACdA,EAAKP,SAAWQ,EAAiByE,EAAU1E,EAAKd,UAC7C,IAAKc,EAAMP,SAAS,GACpBO,IAIR,SAASC,EAAiBgB,EAAiC/B,GACzD,MAAMgB,EAAShB,GAAY+B,EAAM/B,GAEjC,QAAKgB,IAIEA,EAAOT,SAAWQ,EAAiBgB,EAAOf,EAAOhB,WCxB1D,SAAS4F,GAAc,KAAE9E,EAAF,cAAQ+E,IAC7B,MAAMC,EAAwB1C,uBAAY,KACxCyC,EAAc/E,EAAKjB,MAClB,CAACiB,EAAM+E,IAEV,OACE,wBAAQtC,KAAK,SAASX,UAAU,gBAAgBY,QAASsC,EAAzD,kBAMW,SAASC,GAAO,cAAEF,IAC/B,MAAO9D,EAAOiE,GAAYjC,mBAAkB,IAC5CkC,qBAAU,KACR/E,EAAUC,QAAQ6E,KACjB,CAACA,IACJ,MAAMvD,EAAUW,uBAAatC,GACpB,cAAC8E,EAAD,CAAe9E,KAAMA,EAAM+E,cAAeA,KAChD,CAACA,IACEK,EAASvD,mBAAQ,IACd4C,EAAQxD,IACd,CAACA,IAEJ,OACE,qBAAKa,UAAU,2BAAf,SACE,cAACC,EAAD,CACEC,KAAMoD,EACNzD,QAASA,MClCF,SAAS0D,IACtB,MAAOpE,EAAOqE,EAASC,EAAYC,EAAYN,GCNlC,WACb,MAAOjE,EAAOiE,GAAYjC,mBAAkB,IAiB5C,MAAO,CAAChC,EAhBQqB,uBAAatC,IAC3BkF,GAASO,GACPA,EAAMC,MAAK,EAAG3G,QAASA,IAAOiB,EAAKjB,KAAM0G,EAAS3F,EAAc,IAAI2F,EAAOzF,QAE5E,CAACkF,IACe5C,uBAAaqD,IAC9BT,GAASO,GAASA,EAAMlG,KAAIS,GAC1BA,EAAKjB,KAAO4G,EAAY5G,GAAK,IAAKiB,KAAS2F,GAAgB3F,QAE5D,CAACkF,IACe5C,uBAAavD,IAC9BmG,GAASO,GAAS3F,EAAc2F,EAAMlG,KAAIS,GACxCA,EAAKjB,KAAOA,EAAK,IAAKiB,EAAMP,SAAS,GAASO,SAE/C,CAACkF,IAE4CA,GDZWU,GACrDC,EAAavD,uBAAY,KAC7B,IACE,MAAMnB,EAAeL,EAAcE,YAAYC,GAC/CiE,EAAS/D,GACT,MAAO2E,GACPC,MAAMD,EAAMpF,YAEb,CAACO,EAAOiE,IACLc,EAAa1D,uBAAY,KAC7B4C,EAAS,IACT9E,EAAUI,UACT,CAAC0E,IACEH,EAAgBzC,uBAAavD,IACjC,IACE,MAAMiB,EAAOc,EAAcC,YAAYhC,GACvCuG,EAAQtF,GACR,MAAO8F,GACPC,MAAMD,EAAMpF,YAEb,CAAC4E,IACEW,EAAapE,mBAAQ,IAClB4C,EAAQxD,IACd,CAACA,IAEJ,OACE,qBAAKa,UAAU,qBAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,YAAf,SACE,cAACc,EAAD,CACEZ,KAAMiE,EACN/D,MAAOoD,EACPnD,OAAQoD,EACRnD,SAAUoD,EACV3C,QAASgD,EACT/C,QAASkD,MAGb,qBAAKlE,UAAU,YAAf,SACE,cAACmD,EAAD,CAAQF,cAAeA,WE5CjCmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.b9f1a4ce.chunk.js","sourcesContent":["function generateLeafs(): [LeafId, ILeaf][] {\n  let id = 1\n\n  const iter = (levels = 4, parentId = `${id}`): [LeafId, ILeaf][] => {\n    const arr = Array.from({ length: levels }).map(() =>\n      [`${++id}`, { id: `${id}`, parentId, value: `Node${id}`, deleted: false }] as [LeafId, ILeaf]\n    )\n    return levels - 1 ? arr.concat(...arr.map(([id]) => iter(levels - 1, `${id}`))) : arr\n  }\n\n  return [[`${id}`, { id: `${id}`, parentId: null, value: `Node${id}`, deleted: false }], ...iter()]\n}\n\nlet db: Map<LeafId, ILeaf> = new Map(generateLeafs())\nlet updateView = () => {}\n\nfunction reset() {\n  db = new Map(generateLeafs())\n  updateView()\n}\n\nfunction generateId(): LeafId {\n  return `${db.size + 1}`\n}\n\nfunction updateDeleted() {\n  db.forEach(leaf => {\n    if (!leaf.deleted && hasDeletedParent(leaf.parentId)) {\n      leaf.deleted = true\n    }\n  })\n}\n\nfunction hasDeletedParent(parentId: LeafId | null): boolean {\n  const parent = db.get(parentId || '')\n\n  if (!parent) {\n    return false\n  }\n\n  return parent.deleted || hasDeletedParent(parent.parentId)\n}\n\nfunction connect(updater: (leafs: ILeaf[]) => void): void {\n  updateView = () => updater(Array.from(db.values()))\n  updateView()\n}\n\nconst dbTreeApi = {\n  connect,\n  reset,\n}\n\nfunction randomTroubles(message: string) {\n  if (Math.random() < 0.1) {\n    throw new Error(message);\n  }\n}\n\nfunction getLeafById(id: LeafId) {\n  randomTroubles(\"Error on Load. Try again.\")\n  return { ...db.get(id) } as ILeaf\n}\n\nfunction updateLeafs(leafs: ILeaf[]) {\n  randomTroubles(\"Error on Save. Try again.\")\n\n  const newIds: { [key: LeafId]: LeafId } = {}\n\n  const updatedLeafs = leafs.map(leaf => {\n    const newLeaf = { ...leaf }\n\n    if (!db.has(newLeaf.id)) {\n      const newId = generateId()\n      newIds[newLeaf.id] = newId\n      newLeaf.id = newId\n    }\n\n    if (newLeaf.parentId && newIds[newLeaf.parentId]) {\n      newLeaf.parentId = newIds[newLeaf.parentId]\n    }\n\n    db.set(newLeaf.id, newLeaf)\n\n    return newLeaf\n  })\n\n  updateDeleted()\n  updateView()\n\n  return updatedLeafs\n}\n\nconst cachedTreeApi = {\n  getLeafById,\n  updateLeafs,\n}\n\nexport { cachedTreeApi, dbTreeApi }\n","import React, { useMemo, ReactNode } from 'react'\n\ntype TreeAction = (leaf: ILeaf) => ReactNode\n\ninterface ITreeProps {\n  tree: ITree[]\n  actions: TreeAction\n}\n\ninterface ILeafProps extends ITree {\n  actions: TreeAction\n}\n\nfunction Leaf({ id, parentId, value, deleted, children, actions }: ILeafProps) {\n  const actionsNode = useMemo(\n    () => actions({ id, parentId, value, deleted }),\n    [id, parentId, value, deleted, actions]\n  )\n\n  return (\n    <li className=\"list-group-item\">\n      <div className=\"row\">\n        <div className=\"col align-self-center lh-lg\">\n          {deleted ? <del className=\"text-muted\">{value}</del> : value}\n        </div>\n        {!deleted ? (\n          <div className=\"col-auto align-self-center\">\n            <div className=\"btn-group btn-group-sm\">\n              {actionsNode}\n            </div>\n          </div>\n        ) : null}\n      </div>\n      {children.length ? (\n        <Tree\n          tree={children}\n          actions={actions}\n        />\n      ) : null}\n    </li>\n  )\n}\n\nexport default function Tree({ tree, actions }: ITreeProps) {\n  return (\n    <ul className=\"list-group list-group-flush h-100 overflow-auto\">\n      {tree.map((leaf) => (\n        <Leaf\n          key={leaf.id}\n          {...leaf}\n          actions={actions}\n        />\n      ))}\n    </ul>\n  )\n}\n","import React, { useCallback } from 'react';\nimport Tree from './Tree'\n\nexport interface ICachedTreeActions {\n  onAdd(leaf: ILeaf): void\n  onEdit(leaf: ILeaf): void\n  onDelete(id: LeafId): void\n}\n\ninterface ICachedTreeProps extends ICachedTreeActions {\n  tree: ITree[]\n}\n\ninterface ICachedTreeActionsProps extends ICachedTreeActions {\n  leaf: ILeaf\n}\n\nfunction CachedTreeActions({ leaf, onAdd, onEdit, onDelete }: ICachedTreeActionsProps) {\n  const onAddCallback = useCallback(() => {\n    onAdd(leaf)\n  }, [leaf, onAdd])\n  const onEditCallback = useCallback(() => {\n    onEdit(leaf)\n  }, [leaf, onEdit])\n  const onDeleteCallback = useCallback(() => {\n    onDelete(leaf.id)\n  }, [leaf, onDelete])\n\n  return (\n    <>\n      <button type=\"button\" className=\"btn btn-light\" onClick={onAddCallback}>\n        Add\n      </button>\n      <button type=\"button\" className=\"btn btn-light\" onClick={onEditCallback}>\n        Edit\n      </button>\n      <button type=\"button\" className=\"btn btn-light\" onClick={onDeleteCallback}>\n        Delete\n      </button>\n    </>\n  );\n}\n\nexport default function CachedTree({ tree, onAdd, onEdit, onDelete }: ICachedTreeProps) {\n  const actions = useCallback((leaf) => {\n    return (\n      <CachedTreeActions\n        leaf={leaf}\n        onAdd={onAdd}\n        onEdit={onEdit}\n        onDelete={onDelete}\n      />\n    )\n  }, [onAdd, onEdit, onDelete])\n\n  return (\n    <Tree\n      tree={tree}\n      actions={actions}\n    />\n  )\n}\n","import React, { useCallback, useState, useRef } from 'react'\nimport './App.css'\nimport CachedTree from './CachedTree'\n\ninterface ICachedTreeColumnProps  {\n  tree: ITree[]\n  onAdd(leaf: ILeaf): void\n  onEdit(leaf: ILeaf): void\n  onDelete(id: LeafId): void\n  onApply(): void\n  onReset(): void\n}\n\nexport default function CachedTreeColumn({ tree, onAdd, onEdit, onDelete, onApply, onReset }: ICachedTreeColumnProps) {\n  const [newLeafParent, setNewLeafParent] = useState<ILeaf | null>(null)\n  const [leafToEdit, setLeafToEdit] = useState<ILeaf | null>(null)\n  const inputEl = useRef<HTMLInputElement>(null)\n  const [value, setValue] = useState('')\n  const resetForm = useCallback(() => {\n    setNewLeafParent(null)\n    setLeafToEdit(null)\n    setValue('')\n  }, [setNewLeafParent, setLeafToEdit, setValue])\n  const initAdd = useCallback((parentLeaf: ILeaf) => {\n    resetForm()\n    setNewLeafParent(parentLeaf)\n    setTimeout(() => { inputEl.current?.focus() }, 0)\n  }, [resetForm, setNewLeafParent])\n  const initEdit = useCallback((leaf: ILeaf) => {\n    resetForm()\n    setLeafToEdit(leaf)\n    setValue(leaf.value)\n    setTimeout(() => { inputEl.current?.focus() }, 0)\n  }, [resetForm, setLeafToEdit, setValue])\n  const onDeleteCallback = useCallback((id: LeafId) => {\n    onDelete(id)\n    resetForm()\n  }, [resetForm, onDelete])\n  const onChange = useCallback((e) => {\n    setValue(e.target.value)\n  }, [])\n  const onSubmit = useCallback((e) => {\n    e.preventDefault()\n    if (newLeafParent) {\n      onAdd({ id: `temp${Math.random()}${Date.now()}`, parentId: newLeafParent.id, value, deleted: false })\n    }\n    if (leafToEdit) {\n      onEdit({ ...leafToEdit, value })\n    }\n    resetForm()\n  }, [newLeafParent, leafToEdit, value, resetForm, onAdd, onEdit])\n  const onApplyCallback = useCallback(() => {\n    resetForm()\n    onApply()\n  }, [resetForm, onApply])\n  const onResetCallback = useCallback(() => {\n    resetForm()\n    onReset()\n  }, [resetForm, onReset])\n\n  return (\n    <div className=\"card h-100 d-flex flex-column\">\n      <CachedTree\n        tree={tree}\n        onAdd={initAdd}\n        onEdit={initEdit}\n        onDelete={onDeleteCallback}\n      />\n      <div className=\"card-body\">\n        <div className=\"btn-toolbar flex-nowrap\">\n          <form\n            onSubmit={onSubmit}\n            className=\"input-group input-group-sm me-4 flex-nowrap w-100\"\n          >\n            <input\n              ref={inputEl}\n              type=\"text\"\n              className=\"form-control\"\n              value={value}\n              onChange={onChange}\n              disabled={!newLeafParent && !leafToEdit}\n            />\n            {newLeafParent\n              ? <span className=\"input-group-text\">Parent: {newLeafParent.value}</span>\n              : null\n            }\n            <button\n              type=\"submit\"\n              className=\"btn btn-outline-success\"\n              disabled={!newLeafParent && !leafToEdit}\n            >\n              Ok\n            </button>\n          </form>\n          <div className=\"btn-group btn-group-sm me-2\">\n            <button type=\"button\" className=\"btn btn-outline-success\" onClick={onApplyCallback}>\n              Apply\n            </button>\n          </div>\n          <div className=\"btn-group btn-group-sm\">\n            <button type=\"button\" className=\"btn btn-outline-danger\" onClick={onResetCallback}>\n              Reset\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","export function getTree(leafs: ILeaf[]): ITree[] {\n  const tree: ITree[] = []\n  const leafsObj: { [key: LeafId]: ITree } = leafs.reduce(\n    (acc, leaf) => ({ ...acc, [leaf.id]: { ...leaf, children: [] } }),\n    {}\n  )\n\n  leafs.forEach(leaf => {\n    if (leaf.parentId && leafsObj[leaf.parentId]) {\n      leafsObj[leaf.parentId].children.push(leafsObj[leaf.id])\n    } else {\n      tree.push(leafsObj[leaf.id])\n    }\n  })\n\n  return tree\n}\n\nexport function updateDeleted(leafs: ILeaf[]): ILeaf[] {\n  const leafsObj: { [key: LeafId]: ILeaf } = leafs.reduce(\n    (acc, leaf) => ({ ...acc, [leaf.id]: leaf }),\n    {}\n  )\n\n  return leafs.map(leaf =>\n    !leaf.deleted && hasDeletedParent(leafsObj, leaf.parentId)\n      ? { ...leaf, deleted: true }\n      : leaf\n  )\n}\n\nfunction hasDeletedParent(leafs: { [key: LeafId]: ILeaf }, parentId: LeafId | null): boolean {\n  const parent = parentId && leafs[parentId]\n\n  if (!parent) {\n    return false\n  }\n\n  return parent.deleted || hasDeletedParent(leafs, parent.parentId)\n}\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\nimport './App.css'\nimport { dbTreeApi } from './db'\nimport Tree from './Tree'\nimport { getTree } from './utils'\n\ninterface IDBTreeProps {\n  onLoadToCache(id: LeafId): void\n}\n\ninterface IDBTreeActionsProps extends IDBTreeProps {\n  leaf: ILeaf\n}\n\nfunction DBTreeActions({ leaf, onLoadToCache }: IDBTreeActionsProps) {\n  const onLoadToCacheCallback = useCallback(() => {\n    onLoadToCache(leaf.id)\n  }, [leaf, onLoadToCache])\n\n  return (\n    <button type=\"button\" className=\"btn btn-light\" onClick={onLoadToCacheCallback}>\n      Load\n    </button>\n  );\n}\n\nexport default function DBTree({ onLoadToCache }: IDBTreeProps) {\n  const [leafs, setLeafs] = useState<ILeaf[]>([])\n  useEffect(() => {\n    dbTreeApi.connect(setLeafs)\n  }, [setLeafs])\n  const actions = useCallback((leaf) => {\n    return <DBTreeActions leaf={leaf} onLoadToCache={onLoadToCache} />\n  }, [onLoadToCache])\n  const dbTree = useMemo(() => {\n    return getTree(leafs)\n  }, [leafs])\n\n  return (\n    <div className=\"card h-100 overflow-auto\">\n      <Tree\n        tree={dbTree}\n        actions={actions}\n      />\n    </div>\n  )\n}\n","import React, { useCallback, useMemo } from 'react'\nimport './App.css'\nimport { cachedTreeApi, dbTreeApi } from './db'\nimport CachedTreeColumn from './CachedTreeColumn'\nimport DBTree from './DBTree'\nimport { getTree } from './utils'\nimport useLeafs from './useLeafs'\n\nexport default function App() {\n  const [leafs, addLeaf, updateLeaf, deleteLeaf, setLeafs] = useLeafs()\n  const applyLeafs = useCallback(() => {\n    try {\n      const updatedLeafs = cachedTreeApi.updateLeafs(leafs)\n      setLeafs(updatedLeafs)\n    } catch (error: any) {\n      alert(error.message)\n    }\n  }, [leafs, setLeafs])\n  const resetLeafs = useCallback(() => {\n    setLeafs([])\n    dbTreeApi.reset()\n  }, [setLeafs])\n  const onLoadToCache = useCallback((id: LeafId) => {\n    try {\n      const leaf = cachedTreeApi.getLeafById(id)\n      addLeaf(leaf)\n    } catch (error: any) {\n      alert(error.message)\n    }\n  }, [addLeaf])\n  const cachedTree = useMemo(() => {\n    return getTree(leafs)\n  }, [leafs])\n\n  return (\n    <div className=\"app container py-5\">\n      <div className=\"row h-100\">\n        <div className=\"col h-100\">\n          <CachedTreeColumn\n            tree={cachedTree}\n            onAdd={addLeaf}\n            onEdit={updateLeaf}\n            onDelete={deleteLeaf}\n            onApply={applyLeafs}\n            onReset={resetLeafs}\n          />\n        </div>\n        <div className=\"col h-100\">\n          <DBTree onLoadToCache={onLoadToCache} />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useCallback, useState } from 'react'\nimport { updateDeleted } from './utils'\n\nexport default function useLeafs() {\n  const [leafs, setLeafs] = useState<ILeaf[]>([])\n  const addLeaf = useCallback((leaf: ILeaf) => {\n    setLeafs(state =>\n      state.some(({ id }) => id === leaf.id) ? state :  updateDeleted([...state, leaf])\n    )\n  }, [setLeafs])\n  const updateLeaf = useCallback((updatedLeaf: ILeaf) => {\n    setLeafs(state => state.map(leaf =>\n      leaf.id === updatedLeaf.id ? { ...leaf, ...updatedLeaf } : leaf)\n    )\n  }, [setLeafs])\n  const deleteLeaf = useCallback((id: LeafId) => {\n    setLeafs(state => updateDeleted(state.map(leaf =>\n      leaf.id === id ? { ...leaf, deleted: true } : leaf)\n    ))\n  }, [setLeafs])\n\n  return [leafs, addLeaf, updateLeaf, deleteLeaf, setLeafs] as const\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}